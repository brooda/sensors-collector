{"version":3,"sources":["serviceWorker.js","InputMobileStandard.js","Typing.js","index.js"],"names":["Boolean","window","location","hostname","match","InputMobileStandard","props","motion","event","state","recording","timestamp","Math","round","timeStamp","motion_data","rotationRate","alpha","beta","gamma","accelerationIncludingGravity","x","y","z","setState","current_signals","movement_signals","push","start","stop","registerBigMotion","big_motion_times","problems","DeviceMotionEvent","addEventListener","Fragment","this","className","onTouchStart","handleTouchStart","onTouchEnd","handleTouchEnd","type","onClick","keyboardRef","r","keyboard","mergeDisplay","layout","default","shift","display","disableButtonHold","buttonTheme","class","buttons","Component","axios","require","Typing","sendDataToAPI","postMessage","post","then","response","uploaded","catch","error","console","log","taskCompleted","displayName","name","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f977d7a9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport Keyboard from \"react-simple-keyboard\";\r\nimport 'react-simple-keyboard/build/css/index.css';\r\nimport './index.css'\r\n\r\nclass InputMobileStandard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            problems: \"\",\r\n            recording: false,\r\n            current_signals: \"\"\r\n        };\r\n\r\n        this.movement_signals = []\r\n        this.big_motion_times = []\r\n\r\n        if( window.DeviceMotionEvent)\r\n        {\r\n            window.addEventListener(\"devicemotion\", this.motion, false);\r\n        }\r\n        else\r\n        {\r\n            this.setState({problems: \"DeviceMotionEvent is not supported\"});\r\n        }\r\n    }\r\n\r\n\r\n    motion = (event) => {\r\n        if (this.state.recording)\r\n        {\r\n            let timestamp = Math.round(event.timeStamp);\r\n            let motion_data = [timestamp, Math.round(100 * event.rotationRate.alpha), Math.round(100 * event.rotationRate.beta), Math.round(100 * event.rotationRate.gamma), \r\n                Math.round(100 * event.accelerationIncludingGravity.x), Math.round(100 * event.accelerationIncludingGravity.y), Math.round(100 * event.accelerationIncludingGravity.z)]\r\n            \r\n            this.setState({current_signals: timestamp + \r\n                Math.round(100 * event.rotationRate.alpha) +\r\n                Math.round(100 * event.rotationRate.beta) +\r\n                Math.round(100 * event.rotationRate.gamma) +\r\n                Math.round(100 * event.accelerationIncludingGravity.x) + \r\n                Math.round(100 * event.accelerationIncludingGravity.y) + \r\n                Math.round(100 * event.accelerationIncludingGravity.z)\r\n            })\r\n            \r\n            this.movement_signals.push(motion_data)\r\n        }\r\n    }\r\n\r\n    start = () => {\r\n        this.setState({recording: true})\r\n    }\r\n    \r\n    stop = () => {\r\n        this.setState({recording: false})\r\n    }\r\n    \r\n    registerBigMotion = (event) => {\r\n        this.big_motion_times.push(event.timeStamp)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <p>{this.state.problems ? this.state.problems : \"Motion is ready to be recorded\"}</p>\r\n                <h1><b>{this.state.recording ? \"RECORDING\" : \"\"}</b></h1>\r\n                <p>{this.state.current_signals}</p>\r\n\r\n                <div className=\"footer\" onTouchStart={this.handleTouchStart} onTouchEnd={this.handleTouchEnd}>\r\n                    <button type=\"button\" className=\"btn btn-success btn-block\" onClick={this.start}> START</button>\r\n                    <button type=\"button\" className=\"btn btn-danger btn-block\" onClick={this.stop}>STOP</button>\r\n                    <button type=\"button\" className=\"btn btn-primary btn-block\" onClick={this.registerBigMotion}>BIG MOTION</button>\r\n                        \r\n                    <Keyboard\r\n                        keyboardRef={r => (this.keyboard = r)}\r\n                        mergeDisplay=\"true\"\r\n                        layout={{\r\n                            default: [\r\n                                \"1 2 3 4 5 6 7 8 9 0\",\r\n                                \"q w e r t y u i o p\",\r\n                                \"a s d f g h j k l\",\r\n                                \"{shift} z x c v b n m {backspace}\",\r\n                                \", {space} .\"\r\n                            ],\r\n                            shift: [\r\n                                \"1 2 3 4 5 6 7 8 9 0\",\r\n                                \"Q W E R T Y U I O P\",\r\n                                \"A S D F G H J K L\",\r\n                                \"{shift} Z X C V B N M {backspace}\",\r\n                                \", {space} .\"\r\n                            ],\r\n                        }}\r\n                        display={{\r\n                            \"{escape}\": \"esc ⎋\",\r\n                            \"{tab}\": \"tab ⇥\",\r\n                            \"{backspace}\": \"⌫\",\r\n                            \"{capslock}\": \"caps lock ⇪\",\r\n                            \"{shift}\": \"⇧\",\r\n                            \"{controlleft}\": \"ctrl ⌃\",\r\n                            \"{controlright}\": \"ctrl ⌃\",\r\n                            \"{altleft}\": \"alt ⌥\",\r\n                            \"{altright}\": \"alt ⌥\",\r\n                            \"{metaleft}\": \"cmd ⌘\",\r\n                            \"{metaright}\": \"cmd ⌘\",\r\n                            \"{abc}\": \"ABC\",\r\n                            \"{space}\": \"space\"\r\n                        }}\r\n                        disableButtonHold={true}\r\n                        buttonTheme = {[\r\n                            {\r\n                              class: \"margin-left\",\r\n                              buttons: \"A a ,\"\r\n                            },\r\n                            {\r\n                              class: \"margin-right\",\r\n                              buttons: \"L l .\"\r\n                            },\r\n                            {\r\n                                class: \"space\",\r\n                                buttons: \"{space}\"\r\n                            }\r\n                          ]}\r\n                        >\r\n                    </Keyboard>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputMobileStandard;","import React, { Component } from 'react';\r\nimport InputMobileStandard from './InputMobileStandard'\r\n\r\nconst axios = require('axios');\r\n\r\nexport class Typing extends Component {\r\n  static displayName = Typing.name;\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n        this.state = {\r\n            taskCompleted: false,\r\n            uploaded: false,\r\n        }\r\n    }\r\n\r\n    sendDataToAPI = (postMessage) => {\r\n        let endpoint = \"https://keystrokesapi2.azurewebsites.net/api/Savekeystrokes?code=aZXAMrWM8eMnsao6YrpcolAYZjAgagbeHAaz4eDfKfaPZh9nWw2fbA==\"\r\n        \r\n        axios.post(endpoint, postMessage)\r\n        .then( (response) =>\r\n        {\r\n            this.setState({uploaded: true})\r\n        })\r\n        .catch( (error) =>\r\n        {\r\n            this.setState({uploaded: true})\r\n            console.log(\"Error occured while transfering data\")\r\n        });\r\n    }\r\n\r\n\r\n    render() {return <InputMobileStandard sendDataToAPI={this.sendDataToAPI}></InputMobileStandard>}\r\n} ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Typing } from './Typing';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n    <Typing/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}